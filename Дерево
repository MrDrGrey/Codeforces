#include <iostream>
#include <vector>
using namespace std;
bool isCycle(int v, int parent, vector<vector<int>>& adjacencyMatrix, vector<bool>& visited) {
    visited[v] = true;
    for (int i = 0; i < adjacencyMatrix.size(); i++) {
        if (adjacencyMatrix[v][i] == 1) {
            if (!visited[i]) {
                if (isCycle(i, v, adjacencyMatrix, visited)) {
                    return true;
                }
            } else if (i != parent) {
                return true;
            }
        }
    }
    return false;
}
bool isConnected(vector<bool>& visited) {
    for (bool v : visited) {
        if (!v) {
            return false;
        }
    }
    return true;
}
bool isTree(vector<vector<int>>& adjacencyMatrix) {
    int N = adjacencyMatrix.size();
    vector<bool> visited(N, false);
    if (isCycle(0, -1, adjacencyMatrix, visited)) {
        return false;
    }
    if (!isConnected(visited)) {
        return false;
    }
    return true;
}
int main() {
    int N;
    cin >> N;
    vector<vector<int>> adjacencyMatrix(N, vector<int>(N));
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> adjacencyMatrix[i][j];
        }
    }
    if (isTree(adjacencyMatrix)) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }
    return 0;
}
